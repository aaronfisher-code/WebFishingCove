name: Manual Release Publisher

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag (e.g., v1.0.0-beta1)"
        required: true
      prerelease:
        description: "Mark as prerelease"
        type: boolean
        default: true
      release_name:
        description: "Release name/title"
        required: true
        default: "Development Build"

jobs:
  # Windows Build Job
  windows-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish the application (Windows)
        run: dotnet publish -o ./publish --runtime win-x64

      - name: Zip the Windows publish folder
        run: zip -r ./publish/win64.zip ./publish

      - name: Upload Windows Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: win64
          path: ./publish/win64.zip

  # Linux Build Job
  linux-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Restore dependencies
        run: dotnet restore

      - name: Publish the application (Linux)
        run: dotnet publish -o ./publish --runtime linux-x64

      - name: Copy libsteam_api.so to publish folder
        run: cp ./Cove/NativeLibraries/linux64/libsteam_api.so ./publish/

      - name: Zip the Linux publish folder
        run: zip -r ./publish/linux64.zip ./publish

      - name: Upload Linux Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux64
          path: ./publish/linux64.zip

  # Create Release Job
  create-release:
    runs-on: ubuntu-latest
    needs: [windows-build, linux-build]

    steps:
      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: win64

      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: linux64

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          release_name: ${{ github.event.inputs.release_name }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Upload Windows Build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: win64.zip
          asset_name: win64.zip
          asset_content_type: application/zip

      - name: Upload Linux Build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux64.zip
          asset_name: linux64.zip
          asset_content_type: application/zip
